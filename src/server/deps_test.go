// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/server/deps.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	filters "github.com/xvello/letsblockit/src/filters"
	pages "github.com/xvello/letsblockit/src/pages"
)

// MockpageRenderer is a mock of pageRenderer interface.
type MockpageRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockpageRendererMockRecorder
}

// MockpageRendererMockRecorder is the mock recorder for MockpageRenderer.
type MockpageRendererMockRecorder struct {
	mock *MockpageRenderer
}

// NewMockpageRenderer creates a new mock instance.
func NewMockpageRenderer(ctrl *gomock.Controller) *MockpageRenderer {
	mock := &MockpageRenderer{ctrl: ctrl}
	mock.recorder = &MockpageRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpageRenderer) EXPECT() *MockpageRendererMockRecorder {
	return m.recorder
}

// RegisterHelpers mocks base method.
func (m *MockpageRenderer) RegisterHelpers(helpers map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHelpers", helpers)
}

// RegisterHelpers indicates an expected call of RegisterHelpers.
func (mr *MockpageRendererMockRecorder) RegisterHelpers(helpers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHelpers", reflect.TypeOf((*MockpageRenderer)(nil).RegisterHelpers), helpers)
}

// Render mocks base method.
func (m *MockpageRenderer) Render(c echo.Context, name string, data *pages.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", c, name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockpageRendererMockRecorder) Render(c, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockpageRenderer)(nil).Render), c, name, data)
}

// MockfilterRepository is a mock of filterRepository interface.
type MockfilterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockfilterRepositoryMockRecorder
}

// MockfilterRepositoryMockRecorder is the mock recorder for MockfilterRepository.
type MockfilterRepositoryMockRecorder struct {
	mock *MockfilterRepository
}

// NewMockfilterRepository creates a new mock instance.
func NewMockfilterRepository(ctrl *gomock.Controller) *MockfilterRepository {
	mock := &MockfilterRepository{ctrl: ctrl}
	mock.recorder = &MockfilterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfilterRepository) EXPECT() *MockfilterRepositoryMockRecorder {
	return m.recorder
}

// GetFilter mocks base method.
func (m *MockfilterRepository) GetFilter(name string) (*filters.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilter", name)
	ret0, _ := ret[0].(*filters.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilter indicates an expected call of GetFilter.
func (mr *MockfilterRepositoryMockRecorder) GetFilter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilter", reflect.TypeOf((*MockfilterRepository)(nil).GetFilter), name)
}

// GetFilters mocks base method.
func (m *MockfilterRepository) GetFilters() []*filters.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilters")
	ret0, _ := ret[0].([]*filters.Filter)
	return ret0
}

// GetFilters indicates an expected call of GetFilters.
func (mr *MockfilterRepositoryMockRecorder) GetFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilters", reflect.TypeOf((*MockfilterRepository)(nil).GetFilters))
}

// GetTags mocks base method.
func (m *MockfilterRepository) GetTags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTags indicates an expected call of GetTags.
func (mr *MockfilterRepositoryMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockfilterRepository)(nil).GetTags))
}

// Render mocks base method.
func (m *MockfilterRepository) Render(ctx context.Context, w io.Writer, name string, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", ctx, w, name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockfilterRepositoryMockRecorder) Render(ctx, w, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockfilterRepository)(nil).Render), ctx, w, name, data)
}
